# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *
from buildbot.process.properties import Interpolate
from buildbot.secrets.providers.file import SecretInAFile

c = BuildmasterConfig = {}

# http://docs.buildbot.net/latest/manual/cfg-global.html
c['buildbotNetUsageData'] = 'basic'

####### SECRETS
script_dir=os.path.dirname(os.path.realpath(__file__))
secrets_dir = os.path.join(script_dir, os.pardir, 'secrets')

c['secretsProviders'] = [SecretInAFile(dirname=secrets_dir)]

# Apparently the service isn't started yet, so Interpolate(%(secret:foo)s)
# will fail. To workaround this we can create/start our own secrets provider
# for use early in the startup process. More info at:
# https://github.com/buildbot/buildbot/issues/3131
master_secrets = SecretInAFile(dirname=secrets_dir)
master_secrets.reconfigService(dirname=secrets_dir)


####### WORKERS

c['workers'] = [
  worker.Worker("Win64-1", master_secrets.get('Win64-1')),
  worker.Worker("Win64-2", master_secrets.get('Win64-2')),
  worker.Worker("macOS-1", master_secrets.get('macOS-1')),
]

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# Will have to change this if either username/password need proper
# encoding.
git_url='https://%s:%s@github.com/starryexpanse/StarryExpanse.git' % \
  (master_secrets.get('gituser.txt'), master_secrets.get('gitpasswd.txt'))

c['change_source'] = [
  changes.GitPoller(git_url,
                    workdir='gitpoller-workdir', branch='master',
                    pollinterval=120),
  changes.SVNPoller('http://beetle.starryexpanse.com/svn/starryexpanse',
                    svnuser=master_secrets.get('svnuser.txt'),
                    svnpasswd=master_secrets.get('svnpasswd.txt'),
                    pollinterval=60)
]

####### SCHEDULERS

c['schedulers'] = [
  schedulers.AnyBranchScheduler(name="continuous",
                                change_filter=util.ChangeFilter(),
                                treeStableTimer=90,
                                builderNames=["win64-inc", "mac-inc"]),
  schedulers.ForceScheduler(name="force",
                            builderNames=["win64-inc",
                                          "mac-inc",
                                          "win64-nightly",
                                          "mac-nightly",
                                         ])
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

incremental_factory = util.BuildFactory()
incremental_factory.addSteps([
  steps.SVN(name="SVN Source",
            username=master_secrets.get('svnuser.txt'),
            password=master_secrets.get('svnpasswd.txt'),
            description="Getting/updating Subversion source",
            descriptionDone="Got SVN source",
            repourl="http://beetle.starryexpanse.com/svn/starryexpanse",
	    mode='incremental',
            timeout=5400,
            alwaysUseLatest=True),
  steps.Git(name="Git Source",
            description="Getting/updating Git source",
            descriptionDone="Got Git source",
            repourl=git_url,
            mode='incremental',
            workdir=os.path.join('build', 'UE4', 'StarryExpanse', 'Source'),
            alwaysUseLatest=True),
  steps.ShellCommand(name="Cleaning",
                     description="Cleaning artifacts",
                     descriptionDone="Cleaned",
                     command=[os.path.join('UE4', 'StarryExpanse', 'build'), 'clean']),
  steps.ShellCommand(name="Building",
                     description="Building",
                     descriptionDone="Built",
                     command=[os.path.join('UE4', 'StarryExpanse', 'build'), 'full']),
])

full_factory = util.BuildFactory()
full_factory.addSteps([
  steps.SVN(name="SVN Source",
            description="Getting/updating Subversion source",
            descriptionDone="Got SVN source",
            repourl="http://beetle.starryexpanse.com/svn/starryexpanse",
	    mode='full', method='fresh',
            timeout=5400,
            alwaysUseLatest=True),
  steps.Git(name="Git Source",
            description="Getting/updating Git source",
            descriptionDone="Got Git source",
            repourl='http://github.com/starryexpanse/StarryExpanse.git',
            mode='full', method='fresh',
            workdir=os.path.join('build', 'UE4', 'StarryExpanse', 'Source'),
            alwaysUseLatest=True),
  steps.ShellCommand(name="Cleaning",
                     description="Cleaning artifacts",
                     descriptionDone="Cleaned",
                     command=[os.path.join('UE4', 'StarryExpanse', 'build'), 'clean']),
  steps.ShellCommand(name="Building",
                     description="Building",
                     descriptionDone="Built",
                     command=[os.path.join('UE4', 'StarryExpanse', 'build'), 'full']),
])

c['builders'] = [
  util.BuilderConfig(name="win64-inc",
                     workernames=["Win64-1", "Win64-2"],
                     factory=incremental_factory),
  util.BuilderConfig(name="mac-inc",
                     workernames=["macOS-1"],
                     factory=incremental_factory),
  util.BuilderConfig(name="win64-nightly",
                     workernames=["Win64-1", "Win64-2"],
                     factory=full_factory),
  util.BuilderConfig(name="mac-nightly",
                     workernames=["macOS-1"],
                     factory=full_factory)
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

c['title'] = "Starry Expanse"
c['titleURL'] = "http://www.starryexpanse.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = master_secrets.get('master-url')

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
